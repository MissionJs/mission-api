import * as SStatic  from 'sequelize';
import {BaseBo} from '../../Base';
import {WhereOptions} from '../../../Core';
import {Paginator, BaseRequest, ApiRequest, ISearchEnums} from '../../../common';
import { {{data.EntityName}}Instance, {{data.EntityName}}Attributes} from '../Model/Interface';

export class {{data.Name}}Bo extends BaseBo<{{data.EntityName}}Instance, {{data.EntityName}}Attributes> {
    public async Add{{data.Name}}(req: BaseRequest): Promise<number> {
        let result = await this.Save(req.Data);
        return result.dataValues.Id;
    }

    public async Update{{data.Name}}(req: BaseRequest): Promise<number> {
        let result = await this.Update(req.Data);
        return result.dataValues.Id;
    }

    public async Get{{data.Name}}s(apiReq?: ApiRequest<ISearchEnums>): Promise<Array<{{data.Name}}Attributes>> {
        let where: WhereOptions = {};
        apiReq.Params.forEach((param) => {
            switch (param.Key) {
                case ISearchEnums.Id:
                    where['Id'] = param.Value;
                    break;
                case ISearchEnums.Name:
                    where['Name'] = param.Value;
                    break;
                default:
                    throw 'Not Implemented';
            }
        });
        let pg: Paginator = new Paginator(apiReq.PageContext);
        let result = await this.FindAll({ where: where, limit: pg.Limit, offset: pg.Offset });
        return this.GetAttributes(result);
    }

    public async Delete{{data.Name}}(req: BaseRequest): Promise<Boolean> {
        return await this.MarkAsDelete(req.Id);
    }

    public GetModel(): SStatic.Model<{{data.Name}}Instance, {{data.Name}}Attributes> {
        return this.Models.{{data.Name}};
    }
}
