import * as express from 'express';
import {ServiceFactory} from '../../Base';
import {Router, Request, Response, NextFunction } from '../../../Core';
import { {{data.Name}}Service} from '../Service';

class {{data.Name}}Route {
    public static Add{{data.Name}}(req: Request, res: Response, next: NextFunction): void {
        const service = ServiceFactory.CreateService({{data.Name}}Service, req.body);
        service.Add{{data.Name}}(req.body)
            .then((response) => { res.send(response); })
            .catch(next);
    }
    public static Update{{data.Name}}(req: Request, res: Response, next: NextFunction): void {
        const service = ServiceFactory.CreateService({{data.Name}}Service, req.body);
        service.Update{{data.Name}}(req.body)
            .then((response) => { res.send(response); })
            .catch(next);
    }
    public static Get{{data.Name}}s(req: Request, res: Response, next: NextFunction): void {
        const service = ServiceFactory.CreateService({{data.Name}}Service, req.body);
        service.Get{{data.Name}}s(req.body)
            .then((response) => { res.send(response); })
            .catch(next);
    }
    public static Delete{{data.Name}}(req: Request, res: Response, next: NextFunction): void {
        const service = ServiceFactory.CreateService({{data.Name}}Service, req.body);
        service.Delete{{data.Name}}(req.body)
            .then((response) => { res.send(response); })
            .catch(next);
    }
}

let router: Router = express.Router();
router.post('/' + {{data.Name}}Route.Add{{data.Name}}.name, {{data.Name}}Route.Add{{data.Name}});
router.post('/' + {{data.Name}}Route.Update{{data.Name}}.name, {{data.Name}}Route.Update{{data.Name}});
router.post('/' + {{data.Name}}Route.Get{{data.Name}}s.name, {{data.Name}}Route.Get{{data.Name}}s);
router.post('/' + {{data.Name}}Route.Delete{{data.Name}}.name, {{data.Name}}Route.Delete{{data.Name}});
export default router;
