import {BaseService, BoFactory} from '../../Base';
import { {{data.Name}}Bo} from '../Business';
import {ApiRequest, BaseRequest, ISearchEnums} from '../../../Common';
import {Request} from '../../../Core';
import { {{data.Name}}Attributes} from '../Model/Interface';

export class {{data.Name}}Service extends BaseService {
    private {{data.BO}}Bo: {{data.BO}}Bo;
    constructor(req?: Request) {
        super(req);
        this.{{data.BO}}Bo = BoFactory.GetBo({{data.BO}}Bo, this.Request);
    }

    public async Add{{data.BO}}(req: BaseRequest): Promise<number> {
        return await this.{{data.BO}}Bo.Add{{data.BO}}(req.Data);
    }

    public async Update{{data.BO}}(req: BaseRequest): Promise<number> {
        return await this.{{data.BO}}Bo.Update{{data.BO}}(req.Data);
    }

    public async Get{{data.BO}}s(apiReq?: ApiRequest<ISearchEnums>): Promise<Array<{{data.Name}}Attributes>> {
        return await this.{{data.BO}}Bo.Get{{data.BO}}s(apiReq);
    }

    public async Delete{{data.BO}}(req: BaseRequest): Promise<Boolean> {
        return await this.{{data.BO}}Bo.Delete{{data.BO}}(req);
    }
}
